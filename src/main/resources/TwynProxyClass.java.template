package se.jsa.twyn;

import se.jsa.twyn.internal.TwynContext;
import se.jsa.twyn.internal.Cache;

import org.codehaus.jackson.JsonNode;

import java.lang.Class;
import java.lang.NullPointerException;
import java.util.Objects;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.SuppressWarnings;
import java.lang.reflect.Array;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.Spliterators;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import TARGET_INTERFACE_QUALIFIED;

public class CLASS_NAME implements TARGET_INTERFACE {
	private final TwynContext twyn;
	private final JsonNode jsonNode;
	private final Cache cache;
	
	public CLASS_NAME(TwynContext twyn, JsonNode jsonNode) {
		this.jsonNode = jsonNode;
		this.twyn = Objects.requireNonNull(twyn);
		this.cache = twyn.createCache();
	}
	
IMPLEMENTED_METHODS

	private <T, A, R> R collect(Class<T> componentType, JsonNode jsonNode, boolean parallel, Collector<T, A, R> collector) {
		return StreamSupport.stream(jsonNode.spliterator(), parallel)
			.map(n -> twyn.proxy(n, componentType))
			.collect(collector);
	}
	
	@Override
	public String toString() {
		return "TwynProxyClass<TARGET_INTERFACE> [TOSTRING]";
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TARGET_INTERFACE)) {
			return false;
		}
		CLASS_NAME other = (CLASS_NAME) obj;
		return EQUALS_COMPARISON;
	}
	
	@Override
	public int hashCode() {
		return Objects.hash(HASHCODE_CALLS);
	}
	
}