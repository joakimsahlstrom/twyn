package se.jsa.twyn;

import se.jsa.twyn.BadNodeTypeException;
import se.jsa.twyn.internal.Cache;
import se.jsa.twyn.internal.ErrorFactory;
import se.jsa.twyn.internal.NodeSupplier;
import se.jsa.twyn.internal.Require;
import se.jsa.twyn.internal.TwynContext;
import se.jsa.twyn.internal.datamodel.CollectionNode;
import se.jsa.twyn.internal.datamodel.ContainerNode;
import se.jsa.twyn.internal.datamodel.Node;
import se.jsa.twyn.internal.datamodel.NodeProducer;

import java.lang.Class;
import java.lang.NullPointerException;
import java.util.Objects;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.SuppressWarnings;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Array;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;
import java.util.Spliterators;
import java.util.function.BinaryOperator;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;


import TARGET_INTERFACE_QUALIFIED;

public class CLASS_NAME implements TARGET_INTERFACE, NodeSupplier {
	private final TwynContext twyn;
	private final Node node;
	private final Cache cache;
	
	public CLASS_NAME(TwynContext twyn, Node node) {
		this.node = node;
		this.twyn = Objects.requireNonNull(twyn);
		this.cache = Objects.requireNonNull(twyn.createCache());
	}
	
IMPLEMENTED_METHODS

	private <T, A, R> R collect(Class<T> componentType, CollectionNode node, Collector<T, A, R> collector) {
		return node.streamChildren()
			.map((n) -> {
				try {
					return componentType.isInterface() ? twyn.proxy(n, componentType) : twyn.readValue(n, componentType);
				} catch (Exception e) {
					throw new RuntimeException(e);
				}
			} )
			.collect(collector);
	}

	@SuppressWarnings("deprecation")
	private void set(Node root, String fieldId, Node value) {
		String[] path = fieldId.split("\\.");
		ContainerNode.class.cast(Stream.of(path).limit(path.length - 1).reduce(root, (n, p) -> ContainerNode.class.cast(n).get(p), NO_BINARY_OP))
				.set(path[path.length - 1], value);
	}

	private void set(Node root, int fieldId, Node value) {
		CollectionNode.class.cast(node).set(fieldId, value);
	}

	private Node resolve(Node root, String path) {
		return Stream.of(path.split("\\.")).reduce(root, (n, p) -> ContainerNode.class.cast(n).get(p), NO_BINARY_OP);
	}

	private static final BinaryOperator<Node> NO_BINARY_OP = (n1, n2) -> {
		throw new RuntimeException("NO BINARY OP!");
	};

	private Node resolve(Node root, int index) {
		return CollectionNode.class.cast(root).get(index);
	}

	@Override
	public Node getNode() {
		return node;
	}
	
	@Override
	public String toString() {
		return "CLASS_NAME<TARGET_INTERFACE> [TOSTRING]";
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TARGET_INTERFACE)) {
			return false;
		}
		CLASS_NAME other = (CLASS_NAME) obj;
		return EQUALS_COMPARISON;
	}
	
	@Override
	public int hashCode() {
		return Objects.hash(HASHCODE_CALLS);
	}
	
}